//USE CORRETTO 21
//USE CORRETTO 21
//USE CORRETTO 21
//USE CORRETTO 21
//USE CORRETTO 21

package io.github.some_example_name;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.ScreenUtils;

/** {@link ApplicationListener} implementation shared by all platforms. */
public class Main extends ApplicationAdapter {
    private SpriteBatch batch;
    private Texture image;
    ShapeRenderer sr;
    private Vector2 velocity;
    public Person p1;
    public Person p2;
    private int screenWidth;
    private int screenHeight;

    @Override
    public void create() {
        p1 = new Person();

        sr = new ShapeRenderer();
        velocity = new Vector2((float) (Math.random() * 1000), (float) (Math.random() * 1000));
        screenWidth = Gdx.graphics.getWidth();
        screenHeight = Gdx.graphics.getHeight();
        System.out.println("X is " + velocity.x);
        System.out.println("Y is " + velocity.y);
    }

    @Override
    public void render() {
        //Getters for Circles
        float x = p1.getPersonX();
        float y = p1.getPersonY();
        float radius = 1;


        //Get time
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        ScreenUtils.clear(0.15f, 0.15f, 0.2f, 1f);
        float time = Gdx.graphics.getDeltaTime();

        //Set circle positions
        p1.setPosition(p1.getPersonX() + velocity.x * time, p1.getPersonY() + velocity.y * time);

        sr.begin(ShapeRenderer.ShapeType.Filled);
        sr.circle(x, y, radius);
        sr.end();

        if (x + radius + 10 > screenWidth){
            p1.setPosition(screenWidth - radius - 10, y);
            p2.setPosition(screenWidth - radius - 10, y);
            velocity.x = (float) (velocity.x * Math.random()) * -2;
            velocity.y = (float) (velocity.y * Math.random()) * -2;

            System.out.println("New X is " + velocity.x);
            System.out.println("New Y is " + velocity.y);
        }

        if (x - radius - 10 < 0){
            p1.setPosition(0 + radius + 10, y);
            p2.setPosition(0 + radius + 10, y);
            velocity.x = (float) (velocity.x * Math.random()) * -2;
            velocity.y = (float) (velocity.y * Math.random()) * -2;
            System.out.println("New X is " + velocity.x);
            System.out.println("New Y is " + velocity.y);
        }

        if (y + radius + 10 > screenHeight){
            p1.setPosition(x, screenHeight - radius - 10);
            p2.setPosition(x, screenHeight - radius - 10);
            velocity.x = (float) (velocity.x * Math.random()) * -2;
            velocity.y = (float) (velocity.y * Math.random()) * -2;
            System.out.println("New X is " + velocity.x);
            System.out.println("New Y is " + velocity.y);
        }

        if (y - radius - 10 < 0){
            p1.setPosition(x, 0 + radius + 10);
            p2.setPosition(x, 0 + radius + 10);
            velocity.x = (float) (velocity.x * Math.random()) * -2;
            velocity.y = (float) (velocity.y * Math.random()) * -2;
            System.out.println("New X is " + velocity.x);
            System.out.println("New Y is " + velocity.y);
        }
    }

    @Override
    public void dispose() {
        batch.dispose();
        image.dispose();
    }
}

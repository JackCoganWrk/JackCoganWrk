package io.github.some_example_name;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ScreenUtils;


/** {@link ApplicationListener} implementation shared by all platforms. */
public class Main extends ApplicationAdapter {
    ShapeRenderer sr;
    private Vector2 velocity;
    private Vector2 velocity2;
    public Person p1;
    public Person p2;

    private int screenWidth;
    private int screenHeight;

    @Override
    public void create() {

        p1 = new Person();
        p2 = new Person();


        sr = new ShapeRenderer();
        velocity = new Vector2(100, 100);
        velocity2 = new Vector2(150, 100);
        screenWidth = Gdx.graphics.getWidth();
        screenHeight = Gdx.graphics.getHeight();
        System.out.println("X is " + velocity.x);
        System.out.println("Y is " + velocity.y);
        System.out.println("X2 is " + velocity2.x);
        System.out.println("Y2 is " + velocity2.y);

    }

    @Override
    public void render() {
        //Getters for Circles
        float x = p1.getPersonX();
        float y = p1.getPersonY();
        float x2 = p2.getPersonX2();
        float y2 = p2.getPersonY2();
        float radius = 25;

        //Get time
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        ScreenUtils.clear(0.15f, 0.15f, 0.2f, 1f);
        float time = Gdx.graphics.getDeltaTime();

        //Set circle positions
        p1.setPosition(p1.getPersonX() + velocity.x * time, p1.getPersonY() + velocity.y * time);
        p2.setPosition2(p2.getPersonX2() + velocity2.x * time, p2.getPersonY2() + velocity2.y * time);

        sr.begin(ShapeRenderer.ShapeType.Filled);
        sr.circle(x, y, radius);
        sr.end();

        sr.begin(ShapeRenderer.ShapeType.Filled);
        sr.circle(x2, y2, radius);
        sr.end();

        //X-Axis bounces
        if (x + radius + 1 >= screenWidth) {
            p1.setPosition(screenWidth - radius - 2, y);
            velocity.x = velocity.x * -1;
        }
        if (x2 + radius + 1 >= screenWidth){
            p2.setPosition2(screenWidth - radius - 2, y2);
            velocity2.x = velocity2.x * -1;
        }
        if (x - radius - 1 <= 0) {
            p1.setPosition(0 + radius + 2, y);
            velocity.x = velocity.x * -1;
        }
        if (x2 - radius - 1 <= 0){
            p2.setPosition2(0 + radius + 2, y2);
            velocity2.x = velocity2.x * - 1;
        }

        //Y-Axis bounces
        if (y + radius + 1 >= screenHeight) {
            p1.setPosition(x, screenHeight - radius - 2);
            velocity.y = velocity.y * -1;
        }
        if (y + radius + 1 >= screenHeight){
            p2.setPosition2(x2, screenHeight - radius - 2);
            velocity2.y = velocity2.y * -1;
        }
        if (y - radius - 1 <= 0) {
            p1.setPosition(x, 0 + radius + 2);
            velocity.y = velocity.y * -1;
        }
        if(y2 - radius - 1 <= 0){
            p2.setPosition2(x2, 0 + radius + 2);
            velocity2.y = velocity2.y * -1;
        }

        Vector2 p1 = new Vector2(x, y);
        Vector2 p2 = new Vector2(x2, y2);
        float distance = p1.dst(p2);
        if(distance < radius * 2){
            velocity.x = velocity.x * -1;
            velocity2.x = velocity2.x * -1;
            velocity.y = velocity.y * -1;
            velocity2.y = velocity2.y * -1;
        }
    }
}

//MAIN CLASS

package io.github.some_example_name;
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ScreenUtils;

/** {@link ApplicationListener} implementation shared by all platforms. */
public class Main extends ApplicationAdapter {
    ShapeRenderer sr;
    private Vector2 velocity;
    private Vector2 velocity2;
    private Vector2 velocity3;
    public Person p1;
    public Person p2;
    public Person p3;

    private int screenWidth;
    private int screenHeight;

    Person [] people = new Person[10];

    float col1 = (float)Math.random();
    float col2 = (float)Math.random();
    float col3 = (float)Math.random();
    float col4 = (float)Math.random();

    @Override
    public void create() {

       p1 = new Person();
       p2 = new Person();
       p3 = new Person();

        sr = new ShapeRenderer();
        velocity = new Vector2(100, 100);
        velocity2 = new Vector2(150, 100);
        velocity3 = new Vector2(200, 200);
        screenWidth = Gdx.graphics.getWidth();
        screenHeight = Gdx.graphics.getHeight();
        System.out.println("X is " + velocity.x);
        System.out.println("Y is " + velocity.y);
        System.out.println("X2 is " + velocity2.x);
        System.out.println("Y2 is " + velocity2.y);

    }

    @Override
    public void render() {
        //Getters for Circles
        float x = p1.getPersonX();
        float y = p1.getPersonY();
        float x2 = p2.getPersonX2();
        float y2 = p2.getPersonY2();
        float x3 = p3.getPersonX3();
        float y3 = p3.getPersonY3();
        float radius = 10;

        //Get time
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        ScreenUtils.clear(0.15f, 0.15f, 0.2f, 1f);
        float time = Gdx.graphics.getDeltaTime();

        //Array used to render the people instead of individual renderers
        int i = 0;
        for (Person person : people){
            sr.begin(ShapeRenderer.ShapeType.Filled);
            sr.setColor(col1, col2, col3,col4);
            sr.circle(x + i, y, radius);
            sr.end();
            i += 30;
        }

        //Set circle positions
        p1.setPosition(p1.getPersonX() + velocity.x * time, p1.getPersonY() + velocity.y * time);
        p2.setPosition2(p2.getPersonX2() + velocity2.x * time, p2.getPersonY2() + velocity2.y * time);
        p3.setPosition3(p3.getPersonX3() + velocity3.x * time, p3.getPersonY3() + velocity3.y * time);

        //sr.begin(ShapeRenderer.ShapeType.Filled);
        //sr.setColor(0.15f, 1f, 0.15f, 0.15f);
        //sr.circle(x, y, radius);
        //sr.end();

        sr.begin(ShapeRenderer.ShapeType.Filled);
        sr.setColor(1f, 1f, 5f, 0.15f);
        sr.circle(x2, y2, radius);
        sr.end();

        sr.begin(ShapeRenderer.ShapeType.Filled);
        sr.setColor(5f, 0.15f, 0.15f, 0.15f);
        sr.circle(x3, y3, radius);
        sr.end();

        //X-Axis bounces
        if (x + radius + 1 >= screenWidth) {
            p1.setPosition(screenWidth - radius - 2, y);
            velocity.x *= -1;
        }
        if (x2 + radius + 1 >= screenWidth){
            p2.setPosition2(screenWidth - radius - 2, y2);
            velocity2.x *= -1;
        }
        if (x3 + radius + 1 >= screenWidth){
            p3.setPosition3(screenWidth - radius - 2, y);
            velocity3.x *= -1;
        }
        if (x - radius - 1 <= 0) {
            p1.setPosition(0 + radius + 2, y);
            velocity.x *= -1;
        }
        if (x2 - radius - 1 <= 0){
            p2.setPosition2(0 + radius + 2, y2);
            velocity2.x *= -1;
        }
        if (x3 - radius - 1 <= 0){
            p3.setPosition2(0 + radius + 2, y2);
            velocity3.x *= -1;
        }


        //Y-Axis bounces
        if (y + radius + 1 >= screenHeight) {
            p1.setPosition(x, screenHeight - radius - 2);
            velocity.x *= -1;
        }
        if (y2 + radius + 1 >= screenHeight){
            p2.setPosition2(x2, screenHeight - radius - 2);
            velocity2.x *= -1;
        }
        if (y3 + radius + 1 >= screenHeight){
            p3.setPosition2(x3, screenHeight - radius - 2);
            velocity3.x *= -1;
        }
        if (y - radius - 1 <= 0) {
            p1.setPosition(x, 0 + radius + 2);
            velocity.x *= -1;
        }
        if(y2 - radius - 1 <= 0){
            p2.setPosition2(x2, 0 + radius + 2);
            velocity2.x *= -1;
        }
        if(y3 - radius - 1 <= 0){
            p3.setPosition2(x3, 0 + radius + 2);
            velocity3.x *= -1;
        }



        //Person collisions
        Vector2 dist1Num = new Vector2(x, y);
        Vector2 dist2Num = new Vector2(x2, y2);
        float distance = dist1Num.dst(dist2Num);

        if (distance <= (radius*2) + 1 && x <= x2){
            velocity.x = velocity.x * -1;
            velocity2.x = velocity2.x * -1;
            p1.setPosition(x - 3, y);
        }

        if (distance <= (radius*2) + 1 && x >= x2){
            velocity.x = velocity.x * -1;
            velocity2.x = velocity2.x * -1;
            p1.setPosition(x + 3, y);
        }

        if (distance <= (radius*2) + 1 && y <= y2){
            velocity.y = velocity.y * -1;
            velocity2.y = velocity2.y * -1;
            p1.setPosition(x, y - 3);
        }

        if (distance <= (radius*2) + 1 && y >= y2){
            velocity.y = velocity.y * -1;
            velocity2.y = velocity2.y * -1;
            p1.setPosition(x, y + 3);
        }
    }
}





//PERSON CLASS

package io.github.some_example_name;
import com.badlogic.gdx.math.Vector2;
public class Person {


    // Parameters
        private float personX = (float) Math.random() * 101;
        private float personY = (float) Math.random() * 101;
        private float personX2 = 100;
        private float personY2 = 100;
        private float personX3 = 200;
        private float personY3= 200;

        //Getters
        public float getPersonX() {
            return personX;
        }
        public float getPersonY() {
            return  personY;
        }
        public float getPersonX2() {
            return personX2;
        }
        public float getPersonY2() {
            return  personY2;
        }
        public float getPersonX3(){
            return personX3;
        }
        public float getPersonY3 (){
            return personY3;
        }


        //Set position
        public void setPosition(float personX, float personY) {
            this.personX = personX;
            this.personY = personY;
        }
        public void setPosition2(float personX2, float personY2) {
            this.personX2 = personX2;
            this.personY2 = personY2;
        }
        public void setPosition3 (float personX3, float personY3){
            this.personX3 = personX3;
            this.personY3 = personY3;
        }
}

